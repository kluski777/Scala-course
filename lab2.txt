object Main {
  def main(args: Array[String]): Unit = {
    println(estPi(size=1000))
		println("Sum of the integral "+integ(0,1))
		hello(10)("cos")
		hello("Po prostu")
		println(invokeAndAccumulate(2, (x:Double) => {x*x},5)) //works properly
  }
	def estPi(size:Int=100): Double = {
		var arr: Array[Array[Double]] = tab(size)
		var (sum, all) = (0,0)
		for(i <- 0 until arr.size){
			if(arr(i)(0)*arr(i)(0) + arr(i)(1) * arr(i)(1) <= 1){
				sum+=1
				all+=1
			}
			else 
				all+=1
		}
		4*all.toDouble/sum.toDouble
	}
	def tab(dim1: Int, dim2:Int = 2): Array[Array[Double]] = {
		var x: Array[Array[Double]] = Array.ofDim[Double](dim1, dim2)
		import math._
		for(i <- 0 until dim1){
			for(j <- 0 until dim2){
				x(i)(j) = random() //generating random numbers
			}
		}
		x
	}
	
	def integ(range1:Double, range2:Double):Double ={
		val fcn: (Double) => Double = (x:Double) => {x*x +1}
		val (factor,sajz) = (10,100)
		var arr = tab(sajz)
		for(i<- 0 until arr.size){
			arr(i)(0) *= factor // 0 iterator is y
		}
		var (sum,all) = (0,0)
		for(i<- 0 until arr.size){
			if(fcn(arr(i)(1)) > arr(i)(0)){
				sum+=1
				all+=1
			}
			else 
				all+=1
		}
		sum.toDouble/all.toDouble*factor //premise x is in range (0,1)
	}
	
	def hello(a:Int)(toPrint:String): Unit = {
		for(i<-0 until a)
			print(" ")
		println(toPrint)
	}
	
	def hello(toPrint:String): Unit = {
		println(toPrint)
	}
	
	def invokeAndAccumulate(arg:Double, f: (Double) => Double,reps:Int=2): Double = {
		if(reps > 1 )
			invokeAndAccumulate(f(arg),f,reps-1)
		else 
			arg
	}
	def max(a:Int)(b:Int): Int ={
		if(a>b)
			a
		else 
			b
	}
}
